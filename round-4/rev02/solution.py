targets = [
    (27, 27, 27), (31, 30, 27), (31, 30, 52), (31, 30, 25), (31, 30, 42), (15, 14, 58), (27, 26, 46), (11, 10, 62),
    (21, 20, 32), (21, 20, 8), (21, 20, -20), (21, 20, 6), (21, 20, -21), (12, 13, -14), (27, 26, -27), (27, 26, -51),
    (27, 26, -27), (3, 2, -3), (25, 24, -25), (14, 15, -16), (19, 18, -16), (21, 21, -16), (21, 21, 9), (2, 2, 30),
    (27, 27, 7), (0, 0, 28), (27, 27, 7), (28, 30, 7), (11, 9, 16), (16, 18, 11), (19, 21, 11), (20, 24, 11),
    (3, 15, 28), (3, 15, 2), (3, 15, 26), (3, 15, -3), (3, 15, 21), (20, 24, 2), (20, 24, -26), (20, 24, -1),
    (20, 24, -26), (23, 27, -26), (23, 27, -1), (15, 3, -25), (20, 6, -25), (20, 6, 1), (15, 29, 26), (15, 29, -1),
    (24, 10, -24), (20, 6, -28), (20, 6, -52), (26, 7, -52), (26, 7, -77), (27, 10, -77), (33, 11, -77), (57, 19, -85),
    (57, 19, -61), (57, 19, -30),
]

targets.insert(0, (0, 0, 0))

flag = []
for i, t in enumerate(targets[:-1]):
    nt = targets[i + 1]
    if t[0] != nt[0] and t[1] != nt[1] and t[2] != nt[2]:
        magic = t[0] ^ nt[0]
        assert magic == t[1] ^ nt[1]
        assert magic == t[2] ^ nt[2]

        flag += [(magic << 2) | 3]
    elif t[0] != nt[0] and t[1] != nt[1] and t[2] == nt[2]:
        x, y = nt[0] - t[0], nt[1] - t[1]
        flag += [(y << 5) | (x << 2) | 0]
    elif t[0] == nt[0] and t[1] == nt[1] and t[2] != nt[2]:
        if t[2] > nt[2]:
            times = t[2] - nt[2]
            flag += [(times << 2) | 2]
        else:
            times = nt[2] - t[2]
            flag += [(times << 2) | 1]
    else:
        assert False, f'{t} {nt}'

flag = bytes(flag).decode()
print(flag)

assert flag == 'openECSC{bring_back_the_good_old_java_reflection_3b8fd8ca}'
