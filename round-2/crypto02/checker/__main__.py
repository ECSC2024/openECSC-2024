

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_38013 = Integer(38013); _sage_const_8636821143825786083 = Integer(8636821143825786083); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_0 = Integer(0)
import os
import logging

os.environ["PWNLIB_NOTERM"] = "True"
logging.disable()

from pwn import remote, process

HOST = os.environ.get("HOST", "mathmac.challs.open.ecsc2024.it")
PORT = int(os.environ.get("PORT", _sage_const_38013 ))

REMOTE = True

class Client:
    def __init__(self):
        if REMOTE:
            self.r = remote(HOST, PORT)
        else:
            self.r = process(["python3", "../src/chall.py"])
        self.r.recvline()

    def get_token(self):
        self.r.sendlineafter(b"> ", b"1")
        data = self.r.recvline(False).decode()
        x, tag = data.split(",")
        return int(x), int(tag)
    
    def validate_token(self, x, tag):
        self.r.sendlineafter(b"> ", b"2")
        self.r.sendline(f"{x},{tag}".encode())
        return self.r.recvline(False).decode()

p = _sage_const_8636821143825786083 
K = GF(p)
g = K(_sage_const_4 )

q = (p-_sage_const_1 )//_sage_const_2 
R = Zmod(q-_sage_const_1 )


def solve():
    client = Client()

    M = _sage_const_64 
    A = []
    tags = []
    for _ in range(_sage_const_2 *M):
        x, tag = client.get_token()
        x = list(map(int, bin(x)[_sage_const_2 :].zfill(M)))
        A.append([_sage_const_1 ] + x)
        tags.append(tag)

    for i in range(M):
        B = Matrix(R, A[i:i+M+_sage_const_1 ])
        if gcd(B.det(), q-_sage_const_1 ) == _sage_const_1 :
            ttags = tags[i:i+M+_sage_const_1 ]
            break

    # print("Got values, computed matrix")

    logs = [K(t).log(g) for t in ttags]
    # print("Computed dlogs")

    Binv = B**(-_sage_const_1 )

    row = Binv[_sage_const_0 ]
    res = GF(q)(_sage_const_1 )
    for vi, ti in zip(row, logs):
        res *= GF(q)(ti)**int(vi)

    forged_tag = g**res
    # print("Recovered secret")

    flag = client.validate_token(_sage_const_0 , forged_tag)
    return flag


flag = solve()
print(flag)

