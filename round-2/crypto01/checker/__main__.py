

# This file was *autogenerated* from the file ./__main__.sage
from sage.all_cmdline import *   # import sage library

_sage_const_38011 = Integer(38011); _sage_const_0xffffffffffffffffffffffffffffffff7fffffff = Integer(0xffffffffffffffffffffffffffffffff7fffffff); _sage_const_8 = Integer(8); _sage_const_0xffffffffffffffffffffffffffffffff7ffffffc = Integer(0xffffffffffffffffffffffffffffffff7ffffffc); _sage_const_0x1c97befc54bd7a8b65acf89f81d4d4adc565fa45 = Integer(0x1c97befc54bd7a8b65acf89f81d4d4adc565fa45); _sage_const_0x4a96b5688ef573284664698968c38bb913cbfc82 = Integer(0x4a96b5688ef573284664698968c38bb913cbfc82); _sage_const_0x23a628553168947d59dcc912042351377ac5fb32 = Integer(0x23a628553168947d59dcc912042351377ac5fb32); _sage_const_0x0100000000000000000001f4c8f927aed3ca752257 = Integer(0x0100000000000000000001f4c8f927aed3ca752257); _sage_const_1 = Integer(1); _sage_const_0xfffffffffffffffffffe0b3706d8512b358adda9 = Integer(0xfffffffffffffffffffe0b3706d8512b358adda9); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_1217026089109958965601498719303868517806436843678 = Integer(1217026089109958965601498719303868517806436843678); _sage_const_759448250872938908677880028896924254805920193388 = Integer(759448250872938908677880028896924254805920193388); _sage_const_569173398545399153150935989280567361233052263967 = Integer(569173398545399153150935989280567361233052263967); _sage_const_1199332692307752283550912627888456483713217610524 = Integer(1199332692307752283550912627888456483713217610524); _sage_const_1079027481086532546300937867602186580109338741185 = Integer(1079027481086532546300937867602186580109338741185); _sage_const_1069059598553897685855916305006912095069249705224 = Integer(1069059598553897685855916305006912095069249705224); _sage_const_288315851873985034955567433589056437908480638959 = Integer(288315851873985034955567433589056437908480638959); _sage_const_12045287124509758747086019002237774348075329126 = Integer(12045287124509758747086019002237774348075329126); _sage_const_864117480199393342910610778363331267214279559672 = Integer(864117480199393342910610778363331267214279559672); _sage_const_776470851910979264466357554533884486586230065570 = Integer(776470851910979264466357554533884486586230065570); _sage_const_125353821621861442391960712727526298446557293195 = Integer(125353821621861442391960712727526298446557293195); _sage_const_678687985152159619473210367825117510967511359391 = Integer(678687985152159619473210367825117510967511359391); _sage_const_708868983378893084885762006582760347810790708333 = Integer(708868983378893084885762006582760347810790708333); _sage_const_1456821013185649722962670579831626142255403649699 = Integer(1456821013185649722962670579831626142255403649699); _sage_const_1087880777291130166057466480619109904235474963817 = Integer(1087880777291130166057466480619109904235474963817); _sage_const_1157573364993699351931989005203835939365433852923 = Integer(1157573364993699351931989005203835939365433852923); _sage_const_114689096430069459590931860024621684190362406651 = Integer(114689096430069459590931860024621684190362406651); _sage_const_1146550305237141315493982764352276847601544061131 = Integer(1146550305237141315493982764352276847601544061131); _sage_const_365275067682288802773719966114934668167985864518 = Integer(365275067682288802773719966114934668167985864518); _sage_const_1084568201469664034342141842730256563547003724763 = Integer(1084568201469664034342141842730256563547003724763); _sage_const_747398271589005252059207252040131711215995514190 = Integer(747398271589005252059207252040131711215995514190); _sage_const_1027179285114999715411727668473724213549647450584 = Integer(1027179285114999715411727668473724213549647450584); _sage_const_601844635799634280083241679791178199170445676818 = Integer(601844635799634280083241679791178199170445676818); _sage_const_100 = Integer(100); _sage_const_500 = Integer(500); _sage_const_12 = Integer(12)#!/usr/bin/env sage

from Crypto.Util.number import bytes_to_long, long_to_bytes
import os
from pwn import remote
from itertools import combinations
import logging

logging.disable()

HOST = os.environ.get("HOST", "invention.challs.open.ecsc2024.it")
PORT = int(os.environ.get("PORT", _sage_const_38011 ))

p = _sage_const_0xffffffffffffffffffffffffffffffff7fffffff 
N = p.bit_length()//_sage_const_8 
F = GF(p)
a = F(_sage_const_0xffffffffffffffffffffffffffffffff7ffffffc )
b = F(_sage_const_0x1c97befc54bd7a8b65acf89f81d4d4adc565fa45 )
E = EllipticCurve(F, (a, b))
G = E(_sage_const_0x4a96b5688ef573284664698968c38bb913cbfc82 , _sage_const_0x23a628553168947d59dcc912042351377ac5fb32 )
n = _sage_const_0x0100000000000000000001f4c8f927aed3ca752257 
E.set_order(n)

d = F(_sage_const_1 )
while d.is_square():
    d += _sage_const_1 

nt = _sage_const_0xfffffffffffffffffffe0b3706d8512b358adda9 
ET = E.quadratic_twist(d)
ET.set_order(nt)
GT = ET.gens()[_sage_const_0 ]

def hash_block(M, Ci, CTi):
    try:
        Pm = E.lift_x(M)
        Ci += Pm
    except:
        Pm =  ET.lift_x(M*d*_sage_const_4 )
        CTi += Pm
    return Ci, CTi

def elliptic_hash(Pu, PTu, m):
    assert len(m) >= _sage_const_2 *N

    if len(m) % N != _sage_const_0 :
        pad_length = N - (len(m) % N)
        m += b"\x80"
        m += b"\x00"*(pad_length-_sage_const_1 )

    m_blocks = [ZZ(bytes_to_long(m[i:i+N])) for i in range(_sage_const_0 , len(m), N)]

    k0 = m_blocks[_sage_const_0 ]
    k1 = m_blocks[_sage_const_1 ]


    Ci = k0*Pu
    CTi = k1*PTu

    for i in range(_sage_const_2 , len(m_blocks)):
        Ci, CTi = hash_block(m_blocks[i], Ci, CTi)

    return Ci, CTi

# precomputed p160 points
hs = [_sage_const_1217026089109958965601498719303868517806436843678 , _sage_const_759448250872938908677880028896924254805920193388 , _sage_const_569173398545399153150935989280567361233052263967 , _sage_const_1199332692307752283550912627888456483713217610524 , _sage_const_1079027481086532546300937867602186580109338741185 , _sage_const_1069059598553897685855916305006912095069249705224 , _sage_const_288315851873985034955567433589056437908480638959 , _sage_const_12045287124509758747086019002237774348075329126 , _sage_const_864117480199393342910610778363331267214279559672 , _sage_const_776470851910979264466357554533884486586230065570 , _sage_const_125353821621861442391960712727526298446557293195 , _sage_const_678687985152159619473210367825117510967511359391 , _sage_const_708868983378893084885762006582760347810790708333 , _sage_const_1456821013185649722962670579831626142255403649699 , _sage_const_1087880777291130166057466480619109904235474963817 , _sage_const_1157573364993699351931989005203835939365433852923 , _sage_const_114689096430069459590931860024621684190362406651 , _sage_const_1146550305237141315493982764352276847601544061131 , _sage_const_365275067682288802773719966114934668167985864518 , _sage_const_1084568201469664034342141842730256563547003724763 , _sage_const_747398271589005252059207252040131711215995514190 , _sage_const_1027179285114999715411727668473724213549647450584 , _sage_const_601844635799634280083241679791178199170445676818 ]

xs = {h : long_to_bytes(int((h*G).xy()[_sage_const_0 ])) for h in hs}

def find_comb(hs, target):
    n_qs = len(hs)
    m = [[_sage_const_1  if i == j else _sage_const_0  for i in range(n_qs + _sage_const_2 )] for j in range(n_qs + _sage_const_2 )]
    for i in range(n_qs):
        m[i][-_sage_const_2 ] = hs[i]
    m[n_qs][-_sage_const_2 ] = target
    m[n_qs][-_sage_const_1 ] = _sage_const_2 **_sage_const_100 
    m[-_sage_const_1 ][-_sage_const_2 ] = G.order()
    m[-_sage_const_1 ][-_sage_const_1 ] = _sage_const_0 

    M = matrix(ZZ, m)
    M.rescale_col(n_qs, _sage_const_2 **_sage_const_500 )

    M1 = M.LLL()
    for row in M1:
        if abs(row[-_sage_const_1 ]) == _sage_const_2 **_sage_const_100  and row[-_sage_const_2 ] == _sage_const_0 :
            if (all(x <= _sage_const_0  for x in row[:-_sage_const_2 ]) and row[-_sage_const_1 ] > _sage_const_0 ) or (all(x >= _sage_const_0  for x in row[:-_sage_const_2 ]) and row[-_sage_const_1 ] < _sage_const_0 ):
                return row[:-_sage_const_2 ]
    return None

if __name__ == "__main__":
    with remote(HOST, PORT) as chall:
        k1 = int(chall.recvline().decode().split(" = ")[_sage_const_1 ])
        k2 = int(chall.recvline().decode().split(" = ")[_sage_const_1 ])

        Pu = k1*G
        PTu = k1*GT

        username = "ciao"
        pwd = b"a"*N + b"".join(xs.values())

        chall.recvline()
        chall.recvline()

        chall.sendlineafter(b": ", username.encode())
        token = chall.recvline().decode().strip().split()[-_sage_const_1 ]

        chall.sendlineafter(b": ", (token.encode() + pwd).hex().encode())
        chall.recvline()
        admin_pwd = bytes.fromhex(chall.recvline().decode().split("'")[-_sage_const_2 ])
        admin_pwd_blocks = [admin_pwd[i:i+N] for i in range(_sage_const_0 , len(admin_pwd), N)]

        C1, CT1 = elliptic_hash(Pu, PTu, admin_pwd)

        prefix = token.encode()

        payload_blocks = [prefix, admin_pwd_blocks[_sage_const_1 ]]

        target = ((bytes_to_long(admin_pwd_blocks[_sage_const_0 ]) - bytes_to_long(payload_blocks[_sage_const_0 ]))*k1) % G.order()

        for used_hs in combinations(hs, r=_sage_const_12 ):
            comb = find_comb(used_hs, target)
            if comb != None:
                break

        for c, h in zip(comb, used_hs):
            payload_blocks += [xs[h] for _ in range(abs(c))]

        payload_blocks += admin_pwd_blocks[_sage_const_2 :]

        payload = b"".join(payload_blocks)

        chall.sendlineafter(b": ", username.encode())
        chall.sendlineafter(b": ", payload.hex().encode())
        flag = chall.recvline().decode().strip().split()[-_sage_const_1 ]

        print(flag)



