#!/usr/bin/env python3
import os
import sys

userid = sys.argv[1]
output_file = f'attachments/anti-rev/{userid}'

import zlib
import subprocess
import stat
import shutil
import hmac
import hashlib

# 20x20 matrix with inverse in Zmod256
matrix = [(17, 199, 0, 0, 0, 252, 0, 0, 0, 0, 124, 0, 0, 0, 0, 249, 0, 0, 0, 59),
          (50, 18, 0, 149, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 217),
          (0, 0, 0, 175, 0, 0, 0, 0, 0, 128, 0, 0, 0, 103, 0, 31, 0, 0, 36, 0),
          (192, 0, 0, 65, 0, 240, 0, 154, 0, 0, 178, 149, 172, 0, 0, 0, 0, 0, 0, 0),
          (0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0),
          (0, 71, 0, 0, 0, 187, 175, 40, 183, 144, 0, 174, 0, 0, 0, 0, 0, 1, 0, 0),
          (206, 0, 0, 241, 0, 0, 0, 0, 233, 0, 0, 231, 0, 0, 0, 192, 188, 0, 0, 140),
          (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 46, 0, 67, 107, 0, 0, 0),
          (0, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 113, 0, 0, 0, 0, 138, 0, 0, 0),
          (0, 0, 101, 0, 0, 0, 0, 192, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
          (0, 0, 67, 0, 0, 127, 16, 0, 0, 0, 39, 251, 0, 0, 0, 0, 17, 0, 0, 47),
          (135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0),
          (0, 0, 0, 0, 165, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 252),
          (0, 0, 157, 0, 0, 97, 13, 0, 0, 0, 20, 34, 0, 23, 255, 0, 0, 11, 88, 0),
          (0, 0, 0, 166, 0, 0, 0, 0, 10, 0, 0, 0, 139, 0, 0, 0, 56, 0, 221, 0),
          (0, 0, 160, 0, 0, 0, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
          (0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 186),
          (0, 0, 163, 0, 43, 25, 0, 218, 195, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0),
          (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 113, 88, 0),
          (245, 156, 0, 0, 0, 0, 0, 117, 0, 0, 0, 11, 0, 0, 0, 177, 0, 0, 0, 0)]

c = (131, 106, 208, 182, 233, 37, 146, 61, 5, 241, 45, 37, 135, 39, 5, 194, 223, 244, 55, 64)

magic_pos = [4798, 4932, 5067, 5284, 5342, 5587, 5778, 5891, 5986, 6091, 6292, 6368, 6502, 6797, 6957, 7030, 7133, 7321,
             7412, 7570]

binary = zlib.decompress(bytes.fromhex(
    '789ced5c7f705c451ddf77bf9326f7923669d316485adb6962cd350d69498b915c926b2e4efac3360154da974bee929c5ceee2dd3b48b0c540bc4228911b1d0511c6300c5a04853a2362144d9ad2d671c474c6618a0c50900e2d279856d002b6e7eebedd77fbf6de4bc1e12fe776e6f5fbf6b3dfef77bffbddefeeede6edf69b9ef62d2641003499c11700ca4d1529f94682d76c565920560f0ae1bfe5e02a6083790bc3c7d393262d75a8f52872656625cfd32b80960a0cb58079929da34519392b93e7e92f9d5acacae1fa2a08ced141414b5939e49b896a253fd1a0a583c41f2326ad9c89c83d4de49e6ed0d239414ba93f2de4a927fee3296f3e2f7723e1e3690bd052eafb5da765ffff52df0e2257410a786a54df97a09c0d7cfc44bb7727a9cfa81fba4c5a4abb715d28d8bdb16e5dc85f1d0a86e343d543f51bab37d6b9621157ad6a17aa03c554ebb64ed46f530833337697903c2a5fbce4bef69fdedd70f8c8734f7cf0dd1b9f7cb8e2f1ef37511d02e101849f860420ef7920134f003c024608960f9f13811706fa3a7d45c0202d80cf421d3c04327dc3a64506fc6506788b01bece00bfdba0defb0df00df059a98357c1a7182c03458d4a9ec61780fdd683ba692388c9d170cfc020188ccb31204931d9d773b3d4d37fb3d4eb0b8660a93f1806bd7d015cd833e4937a83615f28785b00669112241095a5011f646b6d6f6b6a966a5d75ea5bad6b0390da3ab64afe4034d0178cc98168c7d6e650241ce8f07587908ebe814898e89014565d46a0f4b109f6bc89f43ca2027e32715c120c16a2e8b89e60f165c13cc4d945ca693c533f4c142bf420877711dcc1f98de64f5ea7501bd0c6e12906b732f81906b733f81c833b18fc0283e73138ed47a43b9fc19f25fc48b7c0e0530c6e66f0e30ccefe4ecc32f8279947722997722997722997722997fedfd23fc5ab3ef48efedde13d607d09aed9bd8929d9949ef58e1e71cce0f2f4863b217c3ebd7a1412b11cf3f7a382f3675f4fa7d3499c1770fe849a37e1fcb49a37e3fc219a87daf6616d2d4afd305fcde55773f92bb97c299b5fff4edbd8893ddeb137bca36fceede8681fb71e856b65ef78e1764c1aa6513b4acfbb00782f09b34b513bc7ad0b11d974412e854d7fc1a5343d2f7d4a2c1f41cd9b2114f29f4585e31bde40a4ea92776cce3bfdee75dee90b66af70d47be2925c02153c461438d2a77ab15d541ed937d2f033580ce26b3bbda30d77a257efd869b9c07ba0613fcc9c397b299d3ee387ce396a4dc0bcb01bca6ae4cfde0a0bd14b2794839dd5e8f71eb0acaec47a3c17d64f1df31c514cf5c08e9bca83e071ef81d25a9702fdae1c331e3b330deb41c0641e66de60752af830c4135362e241b8573c83158d5a56d966c4673cef7c7e9f98d80fe1a39e9951ef01cf71f1193076786c76fa944598059e1904c11a05084f1e83368a4f1dcea056ccfc2c525805254c99927cc4bf17e20a3f53276110b1e8f4297315ac2c23b708c95dabca8dec9b9914136fe763f3be46cc9bac55cb19eb14a3cdc2ac3095293023f6efa966679b81edbc876f17b6e225158556b488893ec58a5956f553bc641e44a74fd975eb2a44127dbceda26abbb58a71c442b6498a6ba1196931f1b73c4d17428b9e51bb4ded099bae016655a78ded5bae172d99123bb2f841be8dd867bf98c7a90bb45e276801429fd413830d3b29260af3b07fcfb2fe1de2bd85dc32f92bb667a6c5c48b0e2cb93adb121cb6adf384216afbe46f78536ddabecd16b3ab9e34a1de3167441d5a03b345f3b41d6b31f6e0cf79b38a21aa345a16136fda71a3bf4307c50b3cb7998c300b1961d9b5605bcf5eae23dfe2158bd9b1464a8a10ff6f7547d3bd6c9ffd504c542ae637180cc938dff178f0b8f406cf64338f62336e662791bd6262d2862bb41a75a6de2c86dbff755df5f7b0ed098b893d8afa7384c7847802f3049eddd089796c6c8d9724100b1eaeb0a2d7c5c4052baea89aad28cb03565587bd4abfef6d78a2d28f3edc036be6317e016be2bf4f6a5da3f3eb8123601ddb21c7c444add290d53480ef9a271071efbf6a30779c1613672dfca4781791b420c9c7e651ad38c2a45b8606dce40ff4e2998b1768c51e31d19b65c59a6c9db8c31e9ec7203c25f9f81eb511cf0a5382e276ed7ccc4c467cfcae9ca723b15f97f07539215a69e40fb5266489ae523c47dfa8572b74d31d62a2c9ac8c4476a2ff31ef6487b62add8af02fca81795c89476afd3cedc7a6bec20ee53562e23113b6ef30d3618c7baddccfc43183a8ac151392a2e835fddf25766e66e36dd73cf6e28134c9dabb584c7c24f061f71e1b6b8ff2aec54362adf194c14d3bec5ae0af7add343973990596fa73375ef23c3b9bfd05c64296edd7304138d9cd5b59ac3b23731107556f82ab46c0ab6ea453cdfb7c33f03ae1211eb56b7f892e330f92f1c0fe321d32888dc7e3bb1800aeedd1ee2ad5984c3524539b93a96b92a9ba646a7d32e54aa6d6265395c9d4ea646a6532559e4c5d914c2d4da61627538b92a9a264aa3099ca4fa6ecc99425991292a3fb8e00390fee7bca60e0a5ece405adffc7cea7d378c2f21ed87ac1efbdba006f2d64eb991158f087995e9758fe2d540c375c8d783fe2bea17dbca1076e2bdcd7b78dbde8ee6c1b7bdfdde11efb4fa777bcba03c2bbdaab2ea23de5991f9d833b8ee98b66b97cfdcb643fd33e76be7decdd96b1b7dce992d7bca3338277d32bf1b7d17ef3abbbdd37b977bbf7b8a599de4c9da8be19c0ec53d59d692e7d1a097d678a0c06c29ee65dcddf00cd916834d023af00374423e1be15a87cb9f95af48d0f7fdb994ba7d1a27b07a4139076cd298133016917a463b0bb67212d821bca39484720ad271f6d4a687db7ed04c25091b0bcc0ee480a0a8ebef1d7431d6811005aecf893d72af8d4211dff48a77720c059b4c559f64571c1ad8e1170ddb2cd9fbd7ad54aaaf726f81c847cec475084cbc83688373238aaeb5ef81c82f50d17c0178fb368bfa9b9d0661e2c8026e1ef994fc2a7ec623a8d3fce6d7116dd676a73967ddbec71568c5b3cceca7bad2dce9afd36afb37ed4deea6c0c3bebddce1ab7b3b2c959d1e42c6b721635391df81bdd7bf069847ad8ef65b9944bb9944bb9944bb9944bb9944bb9944b46899ee3a3e7f6d873d028155046b2f92924d98357297429d543ce012e27797a266f19e527e55770e5ef5f4a47b03c396447f732b3e4701d3d4b779c94d3b37b87085d406819a1a5409be8d9bd09723e8f9e39ec2294ee1be9d9c22594dfa6c58f5bb5769f24949e31a4f513b7a87c1fa595f60904ba44f20f107de94c394e73247f2729ff80e4d933889f66a2e7bef95443cfe713ba83d02ec393c0f3277afeb3b5b97973456567773c2cc72b36b9ea5c35d5ebe338b7fef6da1a574d9dabb64ac12fafd30cbd56a6e31874d2b55e1737abe7ceb5b805ecd5c5ad6a5c6a719b1a8f5adcaec6ad1677a8fda9c5f3d438d0e2f96abc69f1056a5c6af182cc415e0d5e082a74712718d4c54530a28b17a9f735b478b13a0f68f185ba87adcd60917a0e5f8b97807e5dbc549d57b4f862753ed1e24b74e3d90c47271dff5a7c69e6228906cf9cfbd6e2cbb330e5fec6b9348fa379d304fd36c7f9cd49f08a622dbe82e05d1c7e0dae6319286bccd487d216fc9eed8701a26782d3338cf9b3fdf98081fd46ed7a14979580d00abe449f5f99a74bb3ec3c8cf564f7d71f093f6fe7abf8dfecf83987f564f7afc584fc903d2eec02ba3700fd43e2960eb32582fe7d82cf09faf7068e603c3b7ebc067abe22e8df27181090894bb3e2ad18e931658f2fd9407fd2007fca003f4ceae5edffb3417b5f45f69b96aaf3384d29dcaecc78a7d3df87c4cf35c4fe00c19f03a8de65a082d3739cf0d379661dc1f34d0a3fef9fc52685ff7112e7c364a1b2dca4d8c9f3af31e9b7cb6dd2bfff017aa2724c8ef7f6ba7a40e60a86240f483de86e05bad3e18f487da148b72f24f9e5483426f9e243a0273230180ac801bfabbe66e37a7d2674112428f9a251dfb01408cbd161d01bf50d04247f7c6060188a30390972ca1a565f580e564703b740b32469cb4ef7568fe4d9d6826e806879fd406af9f236f7d6b6666d09be3002a1d66d9d92c74b34785b7602a9b57d7b93bb5ddabe65cb2e4f87d4e16e6af748f4aa4a4f2c8eada6775e1a1b3fee3d15743946cb8d2fc6700a027e9feccbba439361aacbbe33a3d580efd9704a25a4546db0f6ba8ce48f45a47e5fd88faed2b46d97b051523c16f0b34d467e83f9ee588ca8c197752409b6907addf0de8df6ce8fd634e08a0d0fc8be6e48e5a842fbe95b300c350d02573822075c7de1b86b301a190c44e56106ea8e0743feeaa09f40eea6b66ad9d7077059bf2fd60f5cfee130ac42a1725429b925108d0523614d468265d140c88718c9db60484656c096a357575f84bcc4023dc0250786601687822b1ac1bde60af49390edf7473339458712758a047d8755f906825099220ebd0b5c70dc0cc000d71b889f2ca15f68f4db45d7f946f73e6912b8fc6780b2e6a7f246f70e697270f98d9c3c7fdf7115c7cf2f17db3879ba2edd6b503f2f7f037cfe05f70c549eae5f29ad24385d46f2f6a3b31f0b98fae93a9752077118bd2f45e5e9fe2708b4770ce97a9852ba6fa389f73ffabc9e66eca7eb664a1773f69b387a3b50f658344fd7d794d26d056f3f4de340f1a9da7eab96d27d1fef3fdafefb897c13c9d3f53aa55d8c7c998efc2380bd8b09b2ee11f32b50beff1fe2e4e9fa9fd21d1c3f7f5df9279c3cdd2750ca6f0378f9a73979ba9fa0b4f132f2bfe6e4e97a80d2d3854093787b7ecfc9d3f513a59c7896ff9e07daf983bf68cc6f7778f93f71f246f78f8de45fe6e4e9be8852073760f8f83d0d943d86fa770f7a1fb95a9fdfc151b49e161979ba6e3ff831e52f02c5f7545ebd5f4ee4e798f98395a3fdf80450dacfffdd66822c08bb2e53bf4dd0ca67fe83016d3dbc3c4d05e40f35549eae238b0ce4f97c31a99ffff305955fcbe1fcdfdb34b1c7a446223f4402fb4af8b840f6fc91c7d8cea667372a7437a79c9f7f8b0de44b3729741927c0cbff17f95da1b3'))
binary = bytearray(binary)

N = 20
assert len(matrix) == len(matrix[0]) == len(c) == N

HKEY = b'\xfb\x80u\xd2\x0b\xc5\x85\xfd\xaf=\xa3\xea\xd9\xe5+J'
random_part = hmac.new(HKEY, userid.encode(), hashlib.sha256).hexdigest()[:8]
flag_start = b'openECSC{'
flag_end = b'}'
flag_inner = f'f4nCy_n0p5!_{random_part}'.encode()
flag = flag_start + flag_inner + flag_end

assert len(flag_inner) == N

for i in range(N):
    binary[magic_pos[i]] = (sum(matrix[i][j] * flag_inner[j] for j in range(N)) + c[i]) % 256

test_file = f'/tmp/{os.urandom(4).hex()}'
with open(test_file, 'wb') as f:
    f.write(binary)

# *very* rudimentary correctness test
os.chmod(test_file, os.stat(test_file).st_mode | stat.S_IEXEC)  # chmod +x

output = subprocess.check_output([test_file], input=flag, stderr=subprocess.STDOUT)
assert output == b'Correct!\n'

wrong_flag = flag.replace(bytes((flag[-3],)), b'x')
output = subprocess.check_output([test_file], input=wrong_flag, stderr=subprocess.STDOUT)
assert output == b'Wrong!\n'

# move file to attachments dir and print uniq flag
shutil.move(test_file, output_file)
print(flag.decode())
