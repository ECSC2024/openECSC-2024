

# This file was *autogenerated* from the file __main__.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_115792089210356248762697446949407573529996955224135760342422259061068512044369 = Integer(115792089210356248762697446949407573529996955224135760342422259061068512044369); _sage_const_38319 = Integer(38319); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10)#!/usr/bin/env python3

from pwn import process, remote
import logging
import os
from hashlib import sha256

logging.disable()

def sign(m):
    chall.sendlineafter(b": ", m.encode())
    s1, s2 = tuple(map(int, chall.recvline(False).decode().split(": ")[_sage_const_1 ][_sage_const_1 :-_sage_const_1 ].split(", ")))
    return s1, s2

def H(msg):
    return int.from_bytes(sha256(msg).digest(), 'big')

def real_sign(msg, a, b, c, d, x):
        h_msg = H(msg)
        k = _sage_const_1 

        s1 = (a + h_msg*c - k) % q
        s2 = (b + h_msg*d + k*pow(x, -_sage_const_1 , q)) % q

        return (s1, s2)

q = _sage_const_115792089210356248762697446949407573529996955224135760342422259061068512044369 

HOST = os.environ.get("HOST", "nomisuse.challs.external.open.ecsc2024.it")
PORT = int(os.environ.get("PORT", _sage_const_38319 ))

# with process(["python3", "no_misuse.py"]) as chall:
with remote(HOST, PORT) as chall:
    # x = int(chall.recvline().decode().split(" = ")[1])
    # print(f"{x = }")
    # print(chall.recvline().decode())
    chall.recvline().decode()
    chall.recvline().decode()

    s0 = sign("0")
    s1 = sign("1")
    s2 = sign("2")
    s3 = sign("3")

    m0 = H(b"0")
    m1 = H(b"1")
    m2 = H(b"2")
    m3 = H(b"3")

    rhs = ((s1[_sage_const_0 ] - s0[_sage_const_0 ])*pow(m0 - m1, -_sage_const_1 , q) - (s2[_sage_const_0 ] - s0[_sage_const_0 ])*pow(m0 - m2, -_sage_const_1 , q)) % q
    lhs = ((s0[_sage_const_1 ] - s1[_sage_const_1 ])*pow(m0 - m1, -_sage_const_1 , q) - (s0[_sage_const_1 ] - s2[_sage_const_1 ])*pow(m0 - m2, -_sage_const_1 , q)) % q
    hope_x = (rhs*pow(lhs, -_sage_const_1 , q)) % q
    
    A = matrix(GF(q), [[_sage_const_1 , hope_x, m0, m0*hope_x], [_sage_const_1 , hope_x, m1, m1*hope_x], [_sage_const_1 , hope_x, m2, m2*hope_x], [_sage_const_1 , hope_x, m3, m3*hope_x]])
    v = vector(GF(q), [s0[_sage_const_0 ] + hope_x*s0[_sage_const_1 ], s1[_sage_const_0 ] + hope_x*s1[_sage_const_1 ], s2[_sage_const_0 ] + hope_x*s2[_sage_const_1 ], s3[_sage_const_0 ] + hope_x*s3[_sage_const_1 ]])

    a, b, c, d = list(map(int, A.solve_right(v)))

    sign("4")

    for _ in range(_sage_const_10 ):
        msg = bytes.fromhex(chall.recvline().decode().split(": ")[_sage_const_1 ])
        s1, s2 = real_sign(msg, a, b, c, d, hope_x)
        chall.sendlineafter(b": ", str(s1).encode())
        chall.sendlineafter(b": ", str(s2).encode())

    print(chall.recvline().decode())

